# ALB Controller용 ServiceAccount 정의
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    # IRSA로 연결할 IAM Role의 ARN
    eks.amazonaws.com/role-arn: arn:aws:iam::501257812675:role/alb-controller-role-tokyo
---
# 필요한 RBAC 권한
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aws-load-balancer-controller
rules:
  - apiGroups: [""]
    resources: ["services", "endpoints", "pods", "nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources: ["ingresses", "ingressclasses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses/status"]
    verbs: ["update"]
  - apiGroups: ["elbv2.k8s.aws"]
    resources: ["targetgroupbindings", "targetgroupbindings/status"]
    verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
---
# RBAC 바인딩
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aws-load-balancer-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aws-load-balancer-controller
subjects:
  - kind: ServiceAccount
    name: aws-load-balancer-controller
    namespace: kube-system
---
# ALB Controller 배포
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: aws-load-balancer-controller
  name: aws-load-balancer-controller
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: aws-load-balancer-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: aws-load-balancer-controller
    spec:
      serviceAccountName: aws-load-balancer-controller
      containers:
        - args:
            - --cluster-name=myapp-tokyo  # 클러스터 이름 명시
            - --ingress-class=alb
            - --ingress-class-config-default=true
          image: public.ecr.aws/eks/aws-load-balancer-controller:v2.7.1
          name: controller
